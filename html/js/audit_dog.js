
var SwFields = [
	{id: 'name', desc: 'Package Name', caption: 'SW name'},
	{id: 'git_repo', desc: 'SCM Repo of source code', caption: 'Git Repo'},
	{id: 'git_commit', desc: 'git commit or contract address', caption: 'Commit or Address'},
	{id: 'extra_auth', desc: 'Alternative hash of source code', caption: 'Extra Auth'},
	{id: 'extra_auth_type', desc: 'Alternative hash type', caption: 'EAuth Type'}
];

var ClaimFields = [
	{id: 'author', desc: 'Address of claim author', noinput: true, caption: 'Author Addr'},
	{id: 'sw_ix', desc: 'Identifier of SW package', caption: 'SW ID'},
	{id: 'claim', desc: 'Claim text or URL', caption: 'Claim'},
	{id: 'claim_hash', desc: 'Hash of claim contents', caption: 'Claim Hash'},
	{id: 'claim_hash_type', desc: 'Type of hash used for claim contents auth', caption: 'Hash Type'},
	{id: 'claim_ref_adog', desc: 'AuditDog contract where referenced claim exists', caption: 'Ref DB'},
	{id: 'claim_ref_ix', desc: 'The ID of referenced claim', caption: 'Ref ID'},
	{id: 'bl_created', desc: 'Block number when claim was created', noinput: true, caption: 'Created Blck'}
];

var GAS_ADD_SW = 2000000;
var GAS_ADD_CLAIM = 2000000;

var AuditDogInfo = {
	abi:
		[{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"git_repo","type":"string"},{"name":"git_commit","type":"bytes32"},{"name":"extra_auth","type":"bytes32"},{"name":"extra_auth_type","type":"bytes32"},{"name":"claim","type":"string"},{"name":"claim_hash","type":"string"},{"name":"claim_hash_type","type":"string"},{"name":"claim_ref_adog","type":"address"},{"name":"claim_ref_ix","type":"uint256"}],"name":"AddSWAndClaim","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"git_repo","type":"string"}],"name":"SearchByGit","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"m_claims","outputs":[{"name":"author","type":"address"},{"name":"sw_ix","type":"uint256"},{"name":"claim","type":"string"},{"name":"claim_hash","type":"string"},{"name":"claim_hash_type","type":"string"},{"name":"claim_ref_adog","type":"address"},{"name":"claim_ref_ix","type":"uint256"},{"name":"bl_created","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"GetClaimCount","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"m_software","outputs":[{"name":"name","type":"string"},{"name":"git_repo","type":"string"},{"name":"git_commit","type":"bytes32"},{"name":"extra_auth","type":"bytes32"},{"name":"extra_auth_type","type":"bytes32"}],"type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"git_repo","type":"string"},{"name":"git_commit","type":"bytes32"},{"name":"extra_auth","type":"bytes32"},{"name":"extra_auth_type","type":"bytes32"}],"name":"AddSoftware","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"GetSoftwareCount","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"sw_ix","type":"uint256"},{"name":"claim","type":"string"},{"name":"claim_hash","type":"string"},{"name":"claim_hash_type","type":"string"},{"name":"claim_ref_adog","type":"address"},{"name":"claim_ref_ix","type":"uint256"}],"name":"AddClaim","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"OnNewSoftware","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"claim_id","type":"uint256"},{"indexed":true,"name":"sw_id","type":"uint256"}],"name":"OnNewClaimForSw","type":"event"}]
	,
	code:'',
	addr: '0x567b6403fb54b571a424167878bca59eb48eeabf'
};
AuditDogInfo.cls = web3.eth.contract(AuditDogInfo.abi);

var AuditDog = null;
var Software = [];
var Claims = [];

function Tuple2Obj(tuple, fields) {
	var obj = {};
	for (var i = 0; i < fields.length; i++) {
		obj[fields[i].id] = tuple[i];
	}
	return obj;
}

function TableHeader($table, fields) {
	if ($('thead', $table).length > 0) return;

	var $th = $('<thead/>');
	var $th_tr = $('<tr/>');
	$th_tr.appendTo($th);
	$th.appendTo($table);

	$th_tr.append($('<td/>').text('index'));
	for (var i = 0; i < fields.length; i ++) {
		$th_tr.append($('<td/>').text(fields[i].caption));
	}
}

function TableRow($row, tuple, ix) {
	$row.append($('<td/>').text(ix));
	for (var i = 0; i < tuple.length; i++) {
		$row.append($('<td/>').text(tuple[i]));
	}
}

function LoadTable(src, table_id, fields, dest, cnt) {
	var batch = web3.createBatch();
	var $table = $('table#' + table_id);
	TableHeader($table, fields);

	for (var i = 0; i < cnt; i++) {
		(function(ix) {
			batch.add(src.request(ix, function(error, result) {
				if (error) return;
				dest[ix] = result;

				var $row = $('tr[ix='+ix+']', $table);
				if ($row.length == 0) {
					$row = $('<tr/>').attr('ix', ix);
					$table.append($row);
				}
				$row.empty();
				TableRow($row, result, ix);
			}));
		})(i);
	}


	batch.execute();
}

function SubmitForm($form, fields, gas, send_fn) {
	var data = [];
	var $grp = $('.form-group', $form);
	for (var i = 0; i < fields.length; i++) {
		var field = fields[i];
		if (field.noinput) continue;
		var $input = $('#' + field.id);
		data.push($input.val());
	}
	console.log(data);

	data.push({gas: gas});
	var tx = send_fn.sendTransaction.apply(null, data);
	console.log('web3.eth.getTransactionReceipt("'+ tx + '")');
}

function MakeFormRow($parent, caption, id, desc) {
	var $res = $('<div/>').addClass('input-group');
	$res.append( $('<span/>').addClass('input-group-addon').text(caption) );
	$res.append( $('<input/>').addClass('form-control')
			.attr('type', 'text')
			.attr('id', id)
			.attr('placeholder', desc)
	);
	$parent.append($res);
}

function MakeForm($parent, fields) {
	var $grp = $('.form-group', $parent);
	for (var i = 0; i < fields.length; i++) {
		var field = fields[i];
		if (field.noinput) continue;
		MakeFormRow($grp, field.caption, field.id, field.desc);
	}
}

function Reload() {
	var RpcHost = $('#iRpcHost').val();
	var RpcPort = $('#iRpcPort').val();
	web3.setProvider(new web3.providers.HttpProvider('http://' + RpcHost + ':' + RpcPort));

	if (web3.eth.defaultAccount == null) web3.eth.defaultAccount = web3.eth.accounts[0];

	Software = [];
	Claims = [];

	if (AuditDogInfo.addr == '') {
		// deploy
		var myContractReturned = AuditDogInfo.cls.new({
			data: AuditDogInfo.code,
			gas: 3000000,
			from: web3.eth.accounts[0]}, function(err, myContract){
				if(!err) {
					// NOTE: The callback will fire twice!
					// Once the contract has the transactionHash property set and once its deployed on an address.

					// e.g. check tx hash on the first call (transaction send)
					if (!myContract.address) {
						//console.log(myContract.transactionHash) // The hash of the transaction, which deploys the contract

						// check address on the second call (contract deployed)
					} else {
						console.log('addr', myContract.address) // the contract address


						// create some testing data
						AuditDog = AuditDogInfo.cls.at(myContract.address);
						AuditDog.AddSoftware.sendTransaction('git', 'git.linux.org', 'abcd', '', '', {from: web3.eth.accounts[0], gas: GAS_ADD_SW});
						AuditDog.AddSoftware.sendTransaction('hg', 'git.linux.org', 'abcd', '', '', {from: web3.eth.accounts[0], gas: GAS_ADD_SW});
						AuditDog.AddSoftware.sendTransaction('mozilla', 'git.linux.org', 'abcd', '', '', {from: web3.eth.accounts[0], gas: GAS_ADD_SW});
						AuditDog.AddSoftware.sendTransaction('windows', 'git.linux.org', 'abcd', '', '', {from: web3.eth.accounts[0], gas: GAS_ADD_SW});

						AuditDog.AddClaim.sendTransaction(0, 'is safe', '', '', '', 0, {from: web3.eth.accounts[0], gas: GAS_ADD_CLAIM});
						AuditDog.AddClaim.sendTransaction(1, 'is in Python', '', 'hulla hula', '', 0, {from: web3.eth.accounts[0], gas: GAS_ADD_CLAIM});
						AuditDog.AddClaim.sendTransaction(1, 'is big', '', '', '', 0, {from: web3.eth.accounts[0], gas: GAS_ADD_CLAIM});
						AuditDog.AddClaim.sendTransaction(2, 'I dont know', 'blabla', '', '', 0, {from: web3.eth.accounts[0], gas: GAS_ADD_CLAIM});
						AuditDog.AddClaim.sendTransaction(3, 'is a horrible nightmare', '', 'derp', '', 0, {from: web3.eth.accounts[0], gas: GAS_ADD_CLAIM});
					}

					// Note that the returned "myContractReturned" === "myContract",
					// so the returned "myContractReturned" object will also get the address set.
				}
			});

	}


	AuditDog = AuditDogInfo.cls.at(AuditDogInfo.addr);


	LoadTable(AuditDog.m_software, 'software', SwFields, Software, AuditDog.GetSoftwareCount.call().toFixed());
	LoadTable(AuditDog.m_claims, 'claims', ClaimFields, Claims, AuditDog.GetClaimCount.call().toFixed());
}


MakeForm($('#frmSoftware'), SwFields);
MakeForm($('#frmClaim'), ClaimFields);


$('#bSubmitSw').click(function(evt) {
	SubmitForm($(evt.target).parent(), SwFields, GAS_ADD_SW, AuditDog.AddSoftware);
});
$('#bSubmitClaim').click(function(evt) {
	SubmitForm($(evt.target).parent(), ClaimFields, GAS_ADD_CLAIM, AuditDog.AddClaim);
});

$('#bReload').click(Reload);
Reload();
